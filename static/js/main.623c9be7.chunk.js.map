{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["GameState","FlashNumbers","props","useState","currentNumber","setCurrentNumber","useEffect","showNextNumber","currentIndex","flash","length","setTimeout","secPerFlash","onDoneF","className","App","Setup","gameState","setGameState","nOfSets","setNOfSets","nPerSet","setNPerSet","setSecPerFlash","Array","correctNumbers","setCorrectNumbers","userInput","setUserInput","inputChangeHandler","e","handlerF","target","value","stateContent","type","onChange","disabled","onClick","nSet","sets","x","numbers","i","Math","floor","random","push","makeRandomNumbers","ShowNumbers","UserInput","Score","result","resultArray","totalN","correctN","set","setResult","y","r","correct","user","every","rE","getResult","headerCols","header","key","resultHTML","map","cols","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.623c9be7.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nenum GameState {\n  Setup,\n  ShowNumbers,\n  UserInput,\n  Score\n}\n\nconst makeRandomNumbers = (nSet: number, nPerSet: number) => {\n  var sets = new Array<string>();\n  for (var x = 0; x < nSet; x++) {\n    var numbers = \"\";\n    for (var i = 0; i < nPerSet; i++) {\n      numbers = numbers + Math.floor(Math.random() * 10);\n    }\n    sets.push(numbers);\n  }\n  return sets;\n};\n\nconst FlashNumbers: React.FC<{\n  flash: string[];\n  secPerFlash: number;\n  onDoneF: Function;\n}> = props => {\n  const [currentNumber, setCurrentNumber] = useState(\"\");\n\n  const showNextNumber = (currentIndex: number) => {\n    if (currentIndex < props.flash.length) {\n      setCurrentNumber(props.flash[currentIndex]);\n      setTimeout(() => {\n        showNextNumber(currentIndex + 1);\n      }, props.secPerFlash * 1000);\n    } else {\n      props.onDoneF();\n    }\n  };\n\n  useEffect(() => {\n    showNextNumber(0);\n  }, [props.flash.length]);\n  return <div className=\"currentNumber\">{currentNumber}</div>;\n};\n\ninterface ResultEntry {\n  correct: string;\n  user: string;\n}\n\nconst getResult = (correctNumbers: string[], userInput: string) => {\n  const resultArray = new Array<ResultEntry[]>();\n  var totalN = 0;\n  var correctN = 0;\n  for (var x = 0; x < correctNumbers.length; x++) {\n    const set = correctNumbers[x];\n    const setResult = new Array<ResultEntry>();\n    for (var y = 0; y < set.length; y++) {\n      const i = x * set.length + y;\n      const r = { correct: correctNumbers[x][y], user: userInput[i] };\n      setResult.push(r);\n    }\n    totalN++;\n    const allCorrect = setResult.every(rE => {\n      return rE.correct === rE.user;\n    });\n    if (allCorrect) correctN++;\n    resultArray.push(setResult);\n  }\n  return {\n    resultArray,\n    totalN,\n    correctN\n  };\n};\n\nconst App: React.FC = () => {\n  const [gameState, setGameState] = useState(GameState.Setup);\n  const [nOfSets, setNOfSets] = useState(5);\n  const [nPerSet, setNPerSet] = useState(2);\n  const [secPerFlash, setSecPerFlash] = useState(2);\n  const [correctNumbers, setCorrectNumbers] = useState(new Array<string>());\n  const [userInput, setUserInput] = useState(\"\");\n\n  const onStartGame = () => {\n    setCorrectNumbers(makeRandomNumbers(nOfSets, nPerSet));\n    setGameState(GameState.ShowNumbers);\n  };\n\n  const onFlashDone = () => {\n    setGameState(GameState.UserInput);\n  };\n\n  const onUserInputDone = () => {\n    setGameState(GameState.Score);\n  };\n\n  const goToSetup = () => {\n    setGameState(GameState.Setup);\n  };\n\n  const inputChangeHandler = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    handlerF: Function\n  ) => {\n    handlerF(e.target.value);\n  };\n\n  var stateContent = <p>Error: Unknown State</p>;\n  switch (gameState) {\n    case GameState.Setup:\n      stateContent = (\n        <div>\n          <p>Numerosettien määrä:</p>\n          <input\n            value={nOfSets}\n            type=\"number\"\n            onChange={e => inputChangeHandler(e, setNOfSets)}\n          />\n          <p>Numerosetin pituus:</p>\n          <input\n            disabled={true}\n            value={nPerSet}\n            type=\"number\"\n            onChange={e => inputChangeHandler(e, setNPerSet)}\n          />\n          <p>Välähdyksen pituus sekunneissa:</p>\n          <input\n            value={secPerFlash}\n            type=\"number\"\n            onChange={e => inputChangeHandler(e, setSecPerFlash)}\n          />\n          <button onClick={onStartGame}>Aloita</button>\n        </div>\n      );\n      break;\n    case GameState.ShowNumbers:\n      stateContent = (\n        <FlashNumbers\n          flash={correctNumbers}\n          secPerFlash={secPerFlash}\n          onDoneF={onFlashDone}\n        ></FlashNumbers>\n      );\n      break;\n    case GameState.UserInput:\n      stateContent = (\n        <div>\n          <p>Kirjoita numero:</p>\n          <input\n            type=\"text\"\n            onChange={e => inputChangeHandler(e, setUserInput)}\n          />\n          <button onClick={onUserInputDone}>Tarkista</button>\n        </div>\n      );\n      break;\n    case GameState.Score:\n      const result = getResult(correctNumbers, userInput);\n      const headerCols = [\n        <div className=\"col\">Setti</div>,\n        <div className=\"col\">Oikea</div>,\n        <div className=\"col\">Vastaus</div>\n      ];\n      const header = (\n        <div key={\"-Header\"} className=\"flex-grid-thirds grid-header\">\n          {headerCols}\n        </div>\n      );\n      const resultHTML = result.resultArray.map((r, x) => {\n        const cols = [];\n        cols.push(<div className=\"col\">{x + 1}</div>);\n        cols.push(<div className=\"col\">{r.map(set => set.correct)}</div>);\n        const allCorrect = r.every(rE => {\n          return rE.correct === rE.user;\n        });\n        const className = allCorrect ? \"correctResponse\" : \"failedResponse\";\n        cols.push(\n          <div className=\"col\">\n            {r.map(set => {\n              return <span className={className}>{set.user}</span>;\n            })}\n          </div>\n        );\n        return (\n          <div key={\"-\" + x} className=\"flex-grid-thirds\">\n            {cols}\n          </div>\n        );\n      });\n      stateContent = (\n        <div>\n          <div>\n            <p>Tulokset:</p>\n            {header}\n            {resultHTML}\n            <p className=\"resultText\">\n              Oikein: {result.correctN}/{result.totalN} -{\" \"}\n              {((result.correctN / result.totalN) * 100).toFixed(2)}%\n            </p>\n          </div>\n          <button onClick={goToSetup}>Aloita Alusta</button>\n        </div>\n      );\n      break;\n  }\n\n  return (\n    <div className=\"App\">\n      <h2>Muistipeli</h2>\n      {stateContent}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}